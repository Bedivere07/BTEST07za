

// -------------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô Sudoku --------------------
const board = document.getElementById('board');
const cells = [];
let selectedCell = null; // ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà

for (let i = 0; i < 81; i++) {
    const cell = document.createElement('input');
    cell.type = 'text';
    cell.maxLength = 1;
    cell.className = 'cell';
    cell.oninput = () => {
        cell.value = cell.value.replace(/[^1-9]/g, '');
    };
    cell.addEventListener('click', () => {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡πà‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô
        if (selectedCell) selectedCell.classList.remove('selected');
        selectedCell = cell;
        cell.classList.add('selected');
    });
    board.appendChild(cell);
    cells.push(cell);
}

// -------------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å --------------------
let timerElement = document.querySelector('.timer');
let timerInterval = null;
let seconds = 0;
let isGameRunning = false;
let sudokuPuzzle = [];
let sudokuSolution = [];

// -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ --------------------
function startTimer() {
    clearInterval(timerInterval);
    seconds = 0;
    timerInterval = setInterval(() => {
        seconds++;
        const minutes = String(Math.floor(seconds / 60)).padStart(2, '0');
        const secs = String(seconds % 60).padStart(2, '0');
        timerElement.textContent = `${minutes}:${secs}`;
    }, 1000);
}

function stopTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
}

// -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Sudoku --------------------
function generateSudoku() {
    const base = 3;
    const side = base * base;

    const range = n => [...Array(n).keys()];
    const pattern = (r, c) => (base * (r % base) + Math.floor(r / base) + c) % side;
    const shuffle = arr => arr.sort(() => Math.random() - 0.5);

    const rows = [].concat(...shuffle(range(base)).map(g => shuffle(range(base)).map(r => g * base + r)));
    const cols = [].concat(...shuffle(range(base)).map(g => shuffle(range(base)).map(c => g * base + c)));
    const nums = shuffle(range(side).map(n => n + 1));

    const board = rows.map(r => cols.map(c => nums[pattern(r, c)]));
    const puzzle = board.map(row => row.map(val => (Math.random() < 0.6 ? 0 : val)));
    return { solution: board, puzzle };
}

// -------------------- ‡πÅ‡∏™‡∏î‡∏á Sudoku --------------------
function renderBoard(puzzle) {
    for (let i = 0; i < 81; i++) {
        const row = Math.floor(i / 9);
        const col = i % 9;
        const value = puzzle[row][col];
        cells[i].value = value === 0 ? '' : value;
        cells[i].disabled = value !== 0;
        cells[i].classList.remove('selected');

        // ‚¨áÔ∏è ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
        cells[i].classList.remove('prefilled'); 
        if (value !== 0) {
            cells[i].classList.add('prefilled');
        }
    }
    selectedCell = null;
}

// -------------------- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sudoku --------------------
function checkSudoku() {
    const userBoard = [];
    for (let i = 0; i < 9; i++) {
        userBoard.push(cells.slice(i * 9, i * 9 + 9).map(cell => Number(cell.value) || 0));
    }

    const validSet = arr => {
        const nums = arr.filter(n => n !== 0);
        return new Set(nums).size === nums.length && nums.every(n => n >= 1 && n <= 9);
    };

    for (let r = 0; r < 9; r++) if (!validSet(userBoard[r])) return false;
    for (let c = 0; c < 9; c++) {
        const col = userBoard.map(row => row[c]);
        if (!validSet(col)) return false;
    }
    for (let br = 0; br < 3; br++) {
        for (let bc = 0; bc < 3; bc++) {
            const block = [];
            for (let r = 0; r < 3; r++)
                for (let c = 0; c < 3; c++)
                    block.push(userBoard[br * 3 + r][bc * 3 + c]);
            if (!validSet(block)) return false;
        }
    }
    return true;
}

// -------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç --------------------
function countNumber(num) {
    return cells.filter(c => c.value == num).length;
}

// -------------------- ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç --------------------
const tap = document.getElementById('tap');
tap.addEventListener('click', e => {
    if (!selectedCell || selectedCell.disabled) return;
    if (e.target.tagName !== 'P') return;

    const val = e.target.textContent.trim();

    if (val === '‚ùå') {
        selectedCell.value = '';
    } else if (/^[1-9]$/.test(val)) {
        selectedCell.value = val;
    }

    // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö 9 ‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô
    for (let n = 1; n <= 9; n++) {
        const numBtn = tap.querySelector(`.${['zero','one','two','three','four','five','six','seven','eight','nine'][n]}`);
        if (numBtn) {
            const count = countNumber(n);
            numBtn.style.visibility = count >= 9 ? 'hidden' : 'visible';
        }
    }
});

// -------------------- ‡∏õ‡∏∏‡πà‡∏° START --------------------
document.querySelector('.btnstart').addEventListener('click', () => {
    const { solution, puzzle } = generateSudoku();
    sudokuPuzzle = puzzle;
    sudokuSolution = solution;
    renderBoard(puzzle);
    startTimer();
    isGameRunning = true;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
    tap.querySelectorAll('p').forEach(p => (p.style.visibility = 'visible'));
});

// -------------------- ‡∏õ‡∏∏‡πà‡∏° CHECK --------------------
document.querySelector('.btncheck').addEventListener('click', () => {
    if (!isGameRunning) return;

    const correct = checkSudoku();
    if (correct) {
        stopTimer();
        timerElement.textContent = "00:00";
        isGameRunning = false;
        showOverlay('üéâ YOU WIN!', '#4caf50'); // ‚úÖ ‡πÉ‡∏ä‡πâ overlay
    } else {
        showOverlay('‚ùå TRY AGAIN!', '#e53935'); // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î
    }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let isComplete = true;
    for (let i = 0; i < 81; i++) {
        if (cells[i].value === '') {
            isComplete = false;
            break;
        }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    if (!isComplete) {
        showOverlay('‡∏¢‡∏±‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤!', '#ffa500'); // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        return;
    }



});

// -------------------- ‡∏õ‡∏∏‡πà‡∏° GIVE UP --------------------
document.querySelector('.btngiveup').addEventListener('click', () => {
    if (!isGameRunning) return;

    for (let i = 0; i < 81; i++) {
        const r = Math.floor(i / 9);
        const c = i % 9;
        cells[i].value = sudokuSolution[r][c];
        cells[i].disabled = true;
    }

    stopTimer();
    timerElement.textContent = "00:00";
    isGameRunning = false;
    showOverlay('GAME OVER', '#ff4444');
});

// -------------------- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Overlay --------------------
const overlay = document.getElementById('overlay');
const overlayText = document.getElementById('overlay-text');
const overlayBtn = document.getElementById('overlay-btn');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Overlay
function showOverlay(message, color = "#4caf50") {
    overlayText.textContent = message;
    overlayText.style.color = color;
    overlay.style.display = 'flex'; // ‡πÅ‡∏™‡∏î‡∏á overlay
}

// ‡∏õ‡∏∏‡πà‡∏° OK ‡∏ö‡∏ô overlay
overlayBtn.addEventListener('click', () => {
    overlay.style.display = 'none'; // ‡∏õ‡∏¥‡∏î overlay
});

